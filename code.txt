int create_and_send_message(const struct sockaddr *dest_addr, socklen_t addrlen) {
    // TODO: Create a IPv6 socket supporting datagrams
    // TODO: Connect it to the destination
    // TODO: Send the required message (cfr. statement) through the socket

    int sock = socket(AF_INET6, SOCK_DGRAM, 0);

    if (sock == -1) {
        return -1;
    }

    int err = connect(sock, dest_addr, addrlen);
    if (err == -1) {
        return -1;
    }

    int buffer[5] = {htonl(1), htonl(3), htonl(5), htonl(7), htonl(9)};
    int size = 5 * sizeof(int);
    ssize_t sent = send(sock, buffer, size, 0);
    if (sent == -1) {
        return -1;
    }




    close(sock);

    return 0;
}





///////////////////////////////////////////


int recv_and_handle_message(const struct sockaddr *src_addr, socklen_t addrlen) {
    // TODO: Create a IPv6 socket supporting datagrams
    int sock = socket(AF_INET6, SOCK_DGRAM, 0);
    if (sock == -1) {
        return -1;
    }


    // TODO: Bind it to the source
    int err = bind(sock, src_addr, addrlen);  // assign our address to the socket
    if (err == -1) {
        return -1;
    }

    // TODO: Receive a message through the socket
    int buffer[1024];  // allocate a buffer of MAX_MESSAGE_SIZE bytes on the stack
    struct sockaddr peer;
    socklen_t size = sizeof(struct sockaddr);
    // number of bytes received
    ssize_t n_received = recvfrom(sock, buffer, 1024, 0, (struct sockaddr *) &peer, &size);
    if (n_received == -1) {
        return -1;
    }

    // TODO: Perform the computation
    int sum = 0;
    for (int i = 0; i < n_received; i++){
        sum += htonl(buffer[i]);
    }

    char return_char[10];
    int size_char = sprintf(return_char, "%d", sum);
   
    // TODO: Send back the result
    int written = sendto(sock, return_char, size_char, 0, (struct sockaddr *) &peer, size);
    if (written == -1) {
        return -1;
    }

    close(sock);

    return 0;
}